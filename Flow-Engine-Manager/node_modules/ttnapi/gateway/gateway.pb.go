// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/gateway/gateway.proto

package gateway

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LocationMetadata_LocationSource int32

const (
	// The source of the location is not known or not set
	LocationMetadata_UNKNOWN LocationMetadata_LocationSource = 0
	// The location is determined by GPS
	LocationMetadata_GPS LocationMetadata_LocationSource = 1
	// The location is fixed by configuration
	LocationMetadata_CONFIG LocationMetadata_LocationSource = 2
	// The location is set in and updated from a registry
	LocationMetadata_REGISTRY LocationMetadata_LocationSource = 3
	// The location is estimated with IP Geolocation
	LocationMetadata_IP_GEOLOCATION LocationMetadata_LocationSource = 4
)

var LocationMetadata_LocationSource_name = map[int32]string{
	0: "UNKNOWN",
	1: "GPS",
	2: "CONFIG",
	3: "REGISTRY",
	4: "IP_GEOLOCATION",
}

var LocationMetadata_LocationSource_value = map[string]int32{
	"UNKNOWN":        0,
	"GPS":            1,
	"CONFIG":         2,
	"REGISTRY":       3,
	"IP_GEOLOCATION": 4,
}

func (LocationMetadata_LocationSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a36d13542519003f, []int{0, 0}
}

type LocationMetadata struct {
	// Time (unix nanoseconds)
	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// the northâ€“south position (degrees; -90 to +90), where 0 is the equator, north pole is positive, south pole is negative
	Latitude float32 `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// the east-west position (degrees; -180 to +180), where 0 is the Prime Meridian (Greenwich), east is positive , west is negative
	Longitude float32 `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// the altitude (meters), where 0 is the mean sea level
	Altitude int32 `protobuf:"varint,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// the accuracy of the location (meters)
	Accuracy             int32                           `protobuf:"varint,5,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Source               LocationMetadata_LocationSource `protobuf:"varint,6,opt,name=source,proto3,enum=gateway.LocationMetadata_LocationSource" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *LocationMetadata) Reset()      { *m = LocationMetadata{} }
func (*LocationMetadata) ProtoMessage() {}
func (*LocationMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36d13542519003f, []int{0}
}
func (m *LocationMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationMetadata.Merge(m, src)
}
func (m *LocationMetadata) XXX_Size() int {
	return m.Size()
}
func (m *LocationMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_LocationMetadata proto.InternalMessageInfo

func (m *LocationMetadata) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *LocationMetadata) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *LocationMetadata) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *LocationMetadata) GetAltitude() int32 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

func (m *LocationMetadata) GetAccuracy() int32 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *LocationMetadata) GetSource() LocationMetadata_LocationSource {
	if m != nil {
		return m.Source
	}
	return LocationMetadata_UNKNOWN
}

type RxMetadata struct {
	GatewayID string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Indicates whether the gateway is trusted. Components that are able to verify gateway trust MUST do so and set this value accordingly
	GatewayTrusted bool `protobuf:"varint,2,opt,name=gateway_trusted,json=gatewayTrusted,proto3" json:"gateway_trusted,omitempty"`
	// Timestamp (uptime of LoRa module) in microseconds with rollover
	Timestamp uint32 `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Time in Unix nanoseconds
	Time int64 `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`
	// Encrypted time from the Gateway FPGA
	EncryptedTime []byte                `protobuf:"bytes,13,opt,name=encrypted_time,json=encryptedTime,proto3" json:"encrypted_time,omitempty"`
	RfChain       uint32                `protobuf:"varint,21,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	Channel       uint32                `protobuf:"varint,22,opt,name=channel,proto3" json:"channel,omitempty"`
	Antennas      []*RxMetadata_Antenna `protobuf:"bytes,30,rep,name=antennas,proto3" json:"antennas,omitempty"`
	// Frequency in Hz
	Frequency uint64 `protobuf:"varint,31,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Received signal strength in dBm
	RSSI float32 `protobuf:"fixed32,32,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// Signal-to-noise-ratio in dB
	SNR                  float32           `protobuf:"fixed32,33,opt,name=snr,proto3" json:"snr,omitempty"`
	Location             *LocationMetadata `protobuf:"bytes,41,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RxMetadata) Reset()      { *m = RxMetadata{} }
func (*RxMetadata) ProtoMessage() {}
func (*RxMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36d13542519003f, []int{1}
}
func (m *RxMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RxMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RxMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RxMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RxMetadata.Merge(m, src)
}
func (m *RxMetadata) XXX_Size() int {
	return m.Size()
}
func (m *RxMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_RxMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_RxMetadata proto.InternalMessageInfo

func (m *RxMetadata) GetGatewayID() string {
	if m != nil {
		return m.GatewayID
	}
	return ""
}

func (m *RxMetadata) GetGatewayTrusted() bool {
	if m != nil {
		return m.GatewayTrusted
	}
	return false
}

func (m *RxMetadata) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RxMetadata) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *RxMetadata) GetEncryptedTime() []byte {
	if m != nil {
		return m.EncryptedTime
	}
	return nil
}

func (m *RxMetadata) GetRfChain() uint32 {
	if m != nil {
		return m.RfChain
	}
	return 0
}

func (m *RxMetadata) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *RxMetadata) GetAntennas() []*RxMetadata_Antenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *RxMetadata) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *RxMetadata) GetRSSI() float32 {
	if m != nil {
		return m.RSSI
	}
	return 0
}

func (m *RxMetadata) GetSNR() float32 {
	if m != nil {
		return m.SNR
	}
	return 0
}

func (m *RxMetadata) GetLocation() *LocationMetadata {
	if m != nil {
		return m.Location
	}
	return nil
}

type RxMetadata_Antenna struct {
	Antenna uint32 `protobuf:"varint,1,opt,name=antenna,proto3" json:"antenna,omitempty"`
	Channel uint32 `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Received signal power in dBm
	RSSI float32 `protobuf:"fixed32,3,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// Received channel power in dBm
	ChannelRSSI float32 `protobuf:"fixed32,5,opt,name=channel_rssi,json=channelRssi,proto3" json:"channel_rssi,omitempty"`
	// Standard deviation of the RSSI
	RSSIStandardDeviation float32 `protobuf:"fixed32,6,opt,name=rssi_standard_deviation,json=rssiStandardDeviation,proto3" json:"rssi_standard_deviation,omitempty"`
	// Frequency offset (Hz)
	FrequencyOffset int64 `protobuf:"varint,7,opt,name=frequency_offset,json=frequencyOffset,proto3" json:"frequency_offset,omitempty"`
	// Signal-to-noise-ratio in dB
	SNR float32 `protobuf:"fixed32,4,opt,name=snr,proto3" json:"snr,omitempty"`
	// Encrypted fine timestamp from the Gateway FPGA
	EncryptedTime []byte `protobuf:"bytes,10,opt,name=encrypted_time,json=encryptedTime,proto3" json:"encrypted_time,omitempty"`
	// Fine timestamp from the Gateway FPGA (decrypted)
	FineTime             int64    `protobuf:"varint,11,opt,name=fine_time,json=fineTime,proto3" json:"fine_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RxMetadata_Antenna) Reset()      { *m = RxMetadata_Antenna{} }
func (*RxMetadata_Antenna) ProtoMessage() {}
func (*RxMetadata_Antenna) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36d13542519003f, []int{1, 0}
}
func (m *RxMetadata_Antenna) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RxMetadata_Antenna) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RxMetadata_Antenna.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RxMetadata_Antenna) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RxMetadata_Antenna.Merge(m, src)
}
func (m *RxMetadata_Antenna) XXX_Size() int {
	return m.Size()
}
func (m *RxMetadata_Antenna) XXX_DiscardUnknown() {
	xxx_messageInfo_RxMetadata_Antenna.DiscardUnknown(m)
}

var xxx_messageInfo_RxMetadata_Antenna proto.InternalMessageInfo

func (m *RxMetadata_Antenna) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

func (m *RxMetadata_Antenna) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *RxMetadata_Antenna) GetRSSI() float32 {
	if m != nil {
		return m.RSSI
	}
	return 0
}

func (m *RxMetadata_Antenna) GetChannelRSSI() float32 {
	if m != nil {
		return m.ChannelRSSI
	}
	return 0
}

func (m *RxMetadata_Antenna) GetRSSIStandardDeviation() float32 {
	if m != nil {
		return m.RSSIStandardDeviation
	}
	return 0
}

func (m *RxMetadata_Antenna) GetFrequencyOffset() int64 {
	if m != nil {
		return m.FrequencyOffset
	}
	return 0
}

func (m *RxMetadata_Antenna) GetSNR() float32 {
	if m != nil {
		return m.SNR
	}
	return 0
}

func (m *RxMetadata_Antenna) GetEncryptedTime() []byte {
	if m != nil {
		return m.EncryptedTime
	}
	return nil
}

func (m *RxMetadata_Antenna) GetFineTime() int64 {
	if m != nil {
		return m.FineTime
	}
	return 0
}

type TxConfiguration struct {
	// Timestamp (uptime of LoRa module) in microseconds with rollover
	Timestamp uint32 `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RfChain   uint32 `protobuf:"varint,21,opt,name=rf_chain,json=rfChain,proto3" json:"rf_chain,omitempty"`
	// Frequency in Hz
	Frequency uint64 `protobuf:"varint,22,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Transmit power in dBm
	Power int32 `protobuf:"varint,23,opt,name=power,proto3" json:"power,omitempty"`
	// LoRa polarization inversion (basically always true for messages from gateway to node)
	PolarizationInversion bool `protobuf:"varint,31,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
	// FSK frequency deviation in Hz
	FrequencyDeviation   uint32   `protobuf:"varint,32,opt,name=frequency_deviation,json=frequencyDeviation,proto3" json:"frequency_deviation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxConfiguration) Reset()      { *m = TxConfiguration{} }
func (*TxConfiguration) ProtoMessage() {}
func (*TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36d13542519003f, []int{2}
}
func (m *TxConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxConfiguration.Merge(m, src)
}
func (m *TxConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *TxConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_TxConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_TxConfiguration proto.InternalMessageInfo

func (m *TxConfiguration) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TxConfiguration) GetRfChain() uint32 {
	if m != nil {
		return m.RfChain
	}
	return 0
}

func (m *TxConfiguration) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *TxConfiguration) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *TxConfiguration) GetPolarizationInversion() bool {
	if m != nil {
		return m.PolarizationInversion
	}
	return false
}

func (m *TxConfiguration) GetFrequencyDeviation() uint32 {
	if m != nil {
		return m.FrequencyDeviation
	}
	return 0
}

// message Status represents a status update from a Gateway.
type Status struct {
	// Timestamp (uptime of gateway) in microseconds with rollover
	Timestamp uint32 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Time in Unix nanoseconds
	Time int64 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Indicates whether the gateway is trusted. Components that are able to verify gateway trust MUST do so and set this value accordingly
	GatewayTrusted bool `protobuf:"varint,3,opt,name=gateway_trusted,json=gatewayTrusted,proto3" json:"gateway_trusted,omitempty"`
	// Boot time in Unix nanoseconds
	BootTime     int64    `protobuf:"varint,4,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	IP           []string `protobuf:"bytes,11,rep,name=ip,proto3" json:"ip,omitempty"`
	Platform     string   `protobuf:"bytes,12,opt,name=platform,proto3" json:"platform,omitempty"`
	ContactEmail string   `protobuf:"bytes,13,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	Description  string   `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	// The gateway's frequency plan: one of EU_863_870, US_902_928, CN_779_787, EU_433, AU_915_928, CN_470_510, AS_923, AS_920_923, AS_923_925, KR_920_923
	FrequencyPlan string `protobuf:"bytes,15,opt,name=frequency_plan,json=frequencyPlan,proto3" json:"frequency_plan,omitempty"`
	// The value of Bridge is set by the Bridge
	Bridge string `protobuf:"bytes,16,opt,name=bridge,proto3" json:"bridge,omitempty"`
	// The value of Router is set by the Router
	Router string `protobuf:"bytes,17,opt,name=router,proto3" json:"router,omitempty"`
	// Version of Gateway FPGA
	FPGA uint32 `protobuf:"varint,18,opt,name=fpga,proto3" json:"fpga,omitempty"`
	// Version of Gateway DSP software
	DSP uint32 `protobuf:"varint,19,opt,name=dsp,proto3" json:"dsp,omitempty"`
	// Version of gateway driver (in X.X.X format)
	HAL      string            `protobuf:"bytes,20,opt,name=hal,proto3" json:"hal,omitempty"`
	Location *LocationMetadata `protobuf:"bytes,21,opt,name=location,proto3" json:"location,omitempty"`
	// Round-trip time to the server in milliseconds
	RTT uint32 `protobuf:"varint,31,opt,name=rtt,proto3" json:"rtt,omitempty"`
	// Total number of received uplink packets since boot
	RxIn uint32 `protobuf:"varint,41,opt,name=rx_in,json=rxIn,proto3" json:"rx_in,omitempty"`
	// Total number of successful (correct) uplink packets since boot
	RxOk uint32 `protobuf:"varint,42,opt,name=rx_ok,json=rxOk,proto3" json:"rx_ok,omitempty"`
	// Total number of received downlink packets since boot
	TxIn uint32 `protobuf:"varint,43,opt,name=tx_in,json=txIn,proto3" json:"tx_in,omitempty"`
	// Total number of successfully sent downlink packets since boot
	TxOk uint32 `protobuf:"varint,44,opt,name=tx_ok,json=txOk,proto3" json:"tx_ok,omitempty"`
	// Total number of packets received from link testing mote, with CRC OK
	LmOk uint32 `protobuf:"varint,45,opt,name=lm_ok,json=lmOk,proto3" json:"lm_ok,omitempty"`
	// Sequence number of the first packet received from the link testing mote
	LmSt uint32 `protobuf:"varint,46,opt,name=lm_st,json=lmSt,proto3" json:"lm_st,omitempty"`
	// Sequence number of the last packet received from the link testing mote
	LmNw uint32 `protobuf:"varint,47,opt,name=lm_nw,json=lmNw,proto3" json:"lm_nw,omitempty"`
	// Number of lost PPS pulses
	LPPS uint32            `protobuf:"varint,48,opt,name=l_pps,json=lPps,proto3" json:"l_pps,omitempty"`
	OS   *Status_OSMetrics `protobuf:"bytes,51,opt,name=os,proto3" json:"os,omitempty"`
	// debug or warning messages from the gateway
	Messages             []string `protobuf:"bytes,52,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36d13542519003f, []int{3}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Status) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Status) GetGatewayTrusted() bool {
	if m != nil {
		return m.GatewayTrusted
	}
	return false
}

func (m *Status) GetBootTime() int64 {
	if m != nil {
		return m.BootTime
	}
	return 0
}

func (m *Status) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *Status) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Status) GetContactEmail() string {
	if m != nil {
		return m.ContactEmail
	}
	return ""
}

func (m *Status) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Status) GetFrequencyPlan() string {
	if m != nil {
		return m.FrequencyPlan
	}
	return ""
}

func (m *Status) GetBridge() string {
	if m != nil {
		return m.Bridge
	}
	return ""
}

func (m *Status) GetRouter() string {
	if m != nil {
		return m.Router
	}
	return ""
}

func (m *Status) GetFPGA() uint32 {
	if m != nil {
		return m.FPGA
	}
	return 0
}

func (m *Status) GetDSP() uint32 {
	if m != nil {
		return m.DSP
	}
	return 0
}

func (m *Status) GetHAL() string {
	if m != nil {
		return m.HAL
	}
	return ""
}

func (m *Status) GetLocation() *LocationMetadata {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Status) GetRTT() uint32 {
	if m != nil {
		return m.RTT
	}
	return 0
}

func (m *Status) GetRxIn() uint32 {
	if m != nil {
		return m.RxIn
	}
	return 0
}

func (m *Status) GetRxOk() uint32 {
	if m != nil {
		return m.RxOk
	}
	return 0
}

func (m *Status) GetTxIn() uint32 {
	if m != nil {
		return m.TxIn
	}
	return 0
}

func (m *Status) GetTxOk() uint32 {
	if m != nil {
		return m.TxOk
	}
	return 0
}

func (m *Status) GetLmOk() uint32 {
	if m != nil {
		return m.LmOk
	}
	return 0
}

func (m *Status) GetLmSt() uint32 {
	if m != nil {
		return m.LmSt
	}
	return 0
}

func (m *Status) GetLmNw() uint32 {
	if m != nil {
		return m.LmNw
	}
	return 0
}

func (m *Status) GetLPPS() uint32 {
	if m != nil {
		return m.LPPS
	}
	return 0
}

func (m *Status) GetOS() *Status_OSMetrics {
	if m != nil {
		return m.OS
	}
	return nil
}

func (m *Status) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Additional metrics from the operating system
type Status_OSMetrics struct {
	Load_1               float32  `protobuf:"fixed32,1,opt,name=load_1,json=load1,proto3" json:"load_1,omitempty"`
	Load_5               float32  `protobuf:"fixed32,2,opt,name=load_5,json=load5,proto3" json:"load_5,omitempty"`
	Load_15              float32  `protobuf:"fixed32,3,opt,name=load_15,json=load15,proto3" json:"load_15,omitempty"`
	CPUPercentage        float32  `protobuf:"fixed32,11,opt,name=cpu_percentage,json=cpuPercentage,proto3" json:"cpu_percentage,omitempty"`
	MemoryPercentage     float32  `protobuf:"fixed32,21,opt,name=memory_percentage,json=memoryPercentage,proto3" json:"memory_percentage,omitempty"`
	Temperature          float32  `protobuf:"fixed32,31,opt,name=temperature,proto3" json:"temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status_OSMetrics) Reset()      { *m = Status_OSMetrics{} }
func (*Status_OSMetrics) ProtoMessage() {}
func (*Status_OSMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_a36d13542519003f, []int{3, 0}
}
func (m *Status_OSMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status_OSMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status_OSMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status_OSMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status_OSMetrics.Merge(m, src)
}
func (m *Status_OSMetrics) XXX_Size() int {
	return m.Size()
}
func (m *Status_OSMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Status_OSMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_Status_OSMetrics proto.InternalMessageInfo

func (m *Status_OSMetrics) GetLoad_1() float32 {
	if m != nil {
		return m.Load_1
	}
	return 0
}

func (m *Status_OSMetrics) GetLoad_5() float32 {
	if m != nil {
		return m.Load_5
	}
	return 0
}

func (m *Status_OSMetrics) GetLoad_15() float32 {
	if m != nil {
		return m.Load_15
	}
	return 0
}

func (m *Status_OSMetrics) GetCPUPercentage() float32 {
	if m != nil {
		return m.CPUPercentage
	}
	return 0
}

func (m *Status_OSMetrics) GetMemoryPercentage() float32 {
	if m != nil {
		return m.MemoryPercentage
	}
	return 0
}

func (m *Status_OSMetrics) GetTemperature() float32 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterEnum("gateway.LocationMetadata_LocationSource", LocationMetadata_LocationSource_name, LocationMetadata_LocationSource_value)
	golang_proto.RegisterEnum("gateway.LocationMetadata_LocationSource", LocationMetadata_LocationSource_name, LocationMetadata_LocationSource_value)
	proto.RegisterType((*LocationMetadata)(nil), "gateway.LocationMetadata")
	golang_proto.RegisterType((*LocationMetadata)(nil), "gateway.LocationMetadata")
	proto.RegisterType((*RxMetadata)(nil), "gateway.RxMetadata")
	golang_proto.RegisterType((*RxMetadata)(nil), "gateway.RxMetadata")
	proto.RegisterType((*RxMetadata_Antenna)(nil), "gateway.RxMetadata.Antenna")
	golang_proto.RegisterType((*RxMetadata_Antenna)(nil), "gateway.RxMetadata.Antenna")
	proto.RegisterType((*TxConfiguration)(nil), "gateway.TxConfiguration")
	golang_proto.RegisterType((*TxConfiguration)(nil), "gateway.TxConfiguration")
	proto.RegisterType((*Status)(nil), "gateway.Status")
	golang_proto.RegisterType((*Status)(nil), "gateway.Status")
	proto.RegisterType((*Status_OSMetrics)(nil), "gateway.Status.OSMetrics")
	golang_proto.RegisterType((*Status_OSMetrics)(nil), "gateway.Status.OSMetrics")
}

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/gateway/gateway.proto", fileDescriptor_a36d13542519003f)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/gateway/gateway.proto", fileDescriptor_a36d13542519003f)
}

var fileDescriptor_a36d13542519003f = []byte{
	// 1370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0x4f, 0x6c, 0x13, 0xc7,
	0x17, 0xc7, 0x77, 0xd6, 0x8e, 0xff, 0x8c, 0xe3, 0xc4, 0x0c, 0x24, 0x6c, 0x02, 0xbf, 0xb1, 0x7f,
	0xa9, 0x2a, 0x4c, 0x01, 0xa7, 0x09, 0x8d, 0xda, 0x63, 0x93, 0x00, 0xa9, 0xd5, 0x60, 0xbb, 0x63,
	0xa3, 0xaa, 0xbd, 0x58, 0x93, 0xf5, 0xd8, 0x59, 0xb1, 0xde, 0xdd, 0xce, 0x8e, 0x49, 0xd2, 0x13,
	0x47, 0x8e, 0x3d, 0xf6, 0xd8, 0x5b, 0x51, 0x4f, 0x1c, 0x39, 0x72, 0xe4, 0xc8, 0xad, 0x48, 0x95,
	0x22, 0xbc, 0x96, 0x2a, 0x0e, 0x55, 0xc5, 0x91, 0x63, 0x35, 0xb3, 0xeb, 0xb5, 0x13, 0x02, 0xe2,
	0x64, 0xbf, 0xcf, 0xfb, 0xbe, 0xdd, 0x99, 0xef, 0xbc, 0x7d, 0x1a, 0xb8, 0xd1, 0xb3, 0xc4, 0xfe,
	0x60, 0xaf, 0x62, 0xba, 0xfd, 0xd5, 0xd6, 0x3e, 0x6b, 0xed, 0x5b, 0x4e, 0xcf, 0xaf, 0x31, 0x71,
	0xe0, 0xf2, 0xfb, 0xab, 0xd4, 0xb3, 0x56, 0x7b, 0x54, 0xb0, 0x03, 0x7a, 0x34, 0xfe, 0xad, 0x78,
	0xdc, 0x15, 0x2e, 0x4a, 0x47, 0xe1, 0xf2, 0x8d, 0xa9, 0xfa, 0x9e, 0xdb, 0x73, 0x57, 0x55, 0x7e,
	0x6f, 0xd0, 0x55, 0x91, 0x0a, 0xd4, 0xbf, 0xb0, 0x6e, 0xe5, 0x89, 0x0e, 0x0b, 0xbb, 0xae, 0x49,
	0x85, 0xe5, 0x3a, 0x77, 0x99, 0xa0, 0x1d, 0x2a, 0x28, 0x42, 0x30, 0x29, 0xac, 0x3e, 0x33, 0x40,
	0x09, 0x94, 0x13, 0x44, 0xfd, 0x47, 0xcb, 0x30, 0x63, 0x53, 0x61, 0x89, 0x41, 0x87, 0x19, 0x7a,
	0x09, 0x94, 0x75, 0x12, 0xc7, 0xe8, 0x32, 0xcc, 0xda, 0xae, 0xd3, 0x0b, 0x93, 0x09, 0x95, 0x9c,
	0x00, 0x59, 0x49, 0xed, 0xa8, 0x32, 0x59, 0x02, 0xe5, 0x19, 0x12, 0xc7, 0x2a, 0x67, 0x9a, 0x03,
	0x4e, 0xcd, 0x23, 0x63, 0x26, 0xca, 0x45, 0x31, 0xfa, 0x1a, 0xa6, 0x7c, 0x77, 0xc0, 0x4d, 0x66,
	0xa4, 0x4a, 0xa0, 0x3c, 0xb7, 0x5e, 0xae, 0x8c, 0xb7, 0x7c, 0x7a, 0xc1, 0x31, 0x68, 0x2a, 0x3d,
	0x89, 0xea, 0x56, 0x5a, 0x70, 0xee, 0x64, 0x06, 0xe5, 0x60, 0xfa, 0x5e, 0xed, 0xdb, 0x5a, 0xfd,
	0xfb, 0x5a, 0x41, 0x43, 0x69, 0x98, 0xd8, 0x69, 0x34, 0x0b, 0x00, 0x41, 0x98, 0xda, 0xae, 0xd7,
	0xee, 0x54, 0x77, 0x0a, 0x3a, 0x9a, 0x85, 0x19, 0x72, 0x7b, 0xa7, 0xda, 0x6c, 0x91, 0x1f, 0x0a,
	0x09, 0x84, 0xe0, 0x5c, 0xb5, 0xd1, 0xde, 0xb9, 0x5d, 0xdf, 0xad, 0x6f, 0x6f, 0xb6, 0xaa, 0xf5,
	0x5a, 0x21, 0xb9, 0xf2, 0x7b, 0x0a, 0x42, 0x72, 0x18, 0x9b, 0x75, 0x1d, 0xc2, 0x68, 0x5d, 0x6d,
	0xab, 0xa3, 0x2c, 0xcb, 0x6e, 0xe5, 0x83, 0xe3, 0x62, 0x76, 0x27, 0xa4, 0xd5, 0x5b, 0x24, 0x1b,
	0x09, 0xaa, 0x1d, 0x74, 0x05, 0xce, 0x8f, 0xd5, 0x82, 0x0f, 0x7c, 0xc1, 0x3a, 0xca, 0xcd, 0x0c,
	0x99, 0x8b, 0x70, 0x2b, 0xa4, 0xd2, 0x53, 0xe9, 0xbb, 0x2f, 0x68, 0xdf, 0x33, 0x72, 0x25, 0x50,
	0xce, 0x93, 0x09, 0x88, 0x4f, 0x68, 0x76, 0xea, 0x84, 0x3e, 0x85, 0x73, 0xcc, 0x31, 0xf9, 0x91,
	0x27, 0x58, 0xa7, 0xad, 0xb2, 0xf9, 0x12, 0x28, 0xcf, 0x92, 0x7c, 0x4c, 0x5b, 0x52, 0xb6, 0x04,
	0x33, 0xbc, 0xdb, 0x36, 0xf7, 0xa9, 0xe5, 0x18, 0x0b, 0xea, 0xb9, 0x69, 0xde, 0xdd, 0x96, 0x21,
	0x32, 0x60, 0xda, 0xdc, 0xa7, 0x8e, 0xc3, 0x6c, 0x63, 0x31, 0xcc, 0x44, 0x21, 0xfa, 0x12, 0x66,
	0xa8, 0x23, 0x98, 0xe3, 0x50, 0xdf, 0xc0, 0xa5, 0x44, 0x39, 0xb7, 0x7e, 0x29, 0x3e, 0x8d, 0x89,
	0x17, 0x95, 0xcd, 0x50, 0x43, 0x62, 0xb1, 0xdc, 0x46, 0x97, 0xb3, 0x9f, 0x06, 0xcc, 0x31, 0x8f,
	0x8c, 0x62, 0x09, 0x94, 0x93, 0x64, 0x02, 0xd0, 0x65, 0x98, 0xe4, 0xbe, 0x6f, 0x19, 0x25, 0xd9,
	0x33, 0x5b, 0x99, 0xe0, 0xb8, 0x98, 0x24, 0xcd, 0x66, 0x95, 0x28, 0x8a, 0x96, 0x60, 0xc2, 0x77,
	0xb8, 0xf1, 0x7f, 0x95, 0x4c, 0x07, 0xc7, 0xc5, 0x44, 0xb3, 0x46, 0x88, 0x64, 0x68, 0x03, 0x66,
	0xec, 0xe8, 0x64, 0x8d, 0xab, 0x25, 0x50, 0xce, 0xad, 0x2f, 0xbd, 0xb7, 0x3b, 0x48, 0x2c, 0x5d,
	0xfe, 0x47, 0x87, 0xe9, 0x68, 0x8d, 0x72, 0xb3, 0xd1, 0x2a, 0xd5, 0xa1, 0xe5, 0xc9, 0x38, 0x9c,
	0xb6, 0x41, 0x3f, 0x69, 0xc3, 0x78, 0xbd, 0x89, 0x33, 0xd7, 0xbb, 0x0e, 0x67, 0x23, 0x61, 0x5b,
	0xa9, 0x66, 0x94, 0x6a, 0x3e, 0x38, 0x2e, 0xe6, 0xb6, 0x43, 0xae, 0xc4, 0xb9, 0x48, 0x44, 0x64,
	0xcd, 0x77, 0xf0, 0xa2, 0xd4, 0xb6, 0x7d, 0x41, 0x9d, 0x0e, 0xe5, 0x9d, 0x76, 0x87, 0x3d, 0xb0,
	0xc2, 0x7d, 0xa5, 0x54, 0xf9, 0x52, 0x70, 0x5c, 0x5c, 0x90, 0x75, 0xcd, 0x48, 0x71, 0x6b, 0x2c,
	0x20, 0x0b, 0xb2, 0xf2, 0x1d, 0x8c, 0xae, 0xc2, 0x42, 0xec, 0x70, 0xdb, 0xed, 0x76, 0x7d, 0x26,
	0x8c, 0xb4, 0xea, 0x93, 0xf9, 0x98, 0xd7, 0x15, 0x1e, 0x3b, 0x9c, 0x3c, 0xc3, 0xe1, 0x77, 0xbb,
	0x09, 0x9e, 0xd5, 0x4d, 0x97, 0x60, 0xb6, 0x6b, 0x39, 0x2c, 0x54, 0xe4, 0xd4, 0x5b, 0x32, 0x12,
	0xc8, 0xe4, 0xca, 0xdf, 0x00, 0xce, 0xb7, 0x0e, 0xb7, 0x5d, 0xa7, 0x6b, 0xf5, 0x06, 0x3c, 0x5c,
	0xdd, 0x87, 0xfb, 0xfa, 0x03, 0xcd, 0x79, 0xa2, 0x93, 0x16, 0x4f, 0x77, 0xd2, 0x05, 0x38, 0xe3,
	0xb9, 0x07, 0x8c, 0x1b, 0x17, 0xd5, 0x14, 0x09, 0x03, 0xb4, 0x01, 0x17, 0x3d, 0xd7, 0xa6, 0xdc,
	0xfa, 0x59, 0xbd, 0xbc, 0x6d, 0x39, 0x0f, 0x18, 0xf7, 0xa5, 0xb9, 0x45, 0xf5, 0xd1, 0x2d, 0x4c,
	0x67, 0xab, 0xe3, 0x24, 0x5a, 0x85, 0xe7, 0x27, 0x0e, 0x4e, 0x0e, 0xa4, 0xa4, 0x16, 0x84, 0xe2,
	0x54, 0x6c, 0xf9, 0xca, 0x9f, 0x69, 0x98, 0x6a, 0x0a, 0x2a, 0x06, 0xfe, 0xc9, 0xfd, 0x81, 0xf7,
	0x7d, 0xb7, 0xfa, 0xd4, 0x77, 0x7b, 0xc6, 0x48, 0x48, 0x9c, 0x39, 0x12, 0x2e, 0xc1, 0xec, 0x9e,
	0xeb, 0x8a, 0xd0, 0xeb, 0x64, 0xe8, 0xb5, 0x04, 0xea, 0x20, 0x16, 0xa1, 0x6e, 0x49, 0x43, 0x13,
	0xe5, 0xec, 0x56, 0x2a, 0x38, 0x2e, 0xea, 0xd5, 0x06, 0xd1, 0x2d, 0x4f, 0x4e, 0x58, 0xcf, 0xa6,
	0xa2, 0xeb, 0xf2, 0xbe, 0x9a, 0x16, 0x59, 0x12, 0xc7, 0xe8, 0x13, 0x98, 0x37, 0x5d, 0x47, 0x50,
	0x53, 0xb4, 0x59, 0x9f, 0x5a, 0xb6, 0x1a, 0x18, 0x59, 0x32, 0x1b, 0xc1, 0xdb, 0x92, 0xa1, 0x12,
	0xcc, 0x75, 0x98, 0x6f, 0x72, 0xcb, 0x53, 0x26, 0xcc, 0x29, 0xc9, 0x34, 0x92, 0xad, 0x32, 0xb1,
	0xcb, 0xb3, 0xa9, 0x63, 0xcc, 0x2b, 0x51, 0x3e, 0xa6, 0x0d, 0x9b, 0x3a, 0x68, 0x11, 0xa6, 0xf6,
	0xb8, 0xd5, 0xe9, 0x31, 0xa3, 0xa0, 0xd2, 0x51, 0x24, 0x39, 0x77, 0x07, 0x82, 0x71, 0xe3, 0x5c,
	0xc8, 0xc3, 0x48, 0x7e, 0x6c, 0x5d, 0xaf, 0x47, 0x0d, 0x24, 0x4d, 0x0c, 0x3f, 0xb6, 0x3b, 0x8d,
	0x9d, 0x4d, 0xa2, 0xa8, 0x6c, 0xdd, 0x8e, 0xef, 0x19, 0xe7, 0x55, 0x52, 0xb5, 0xee, 0xad, 0x66,
	0x83, 0x48, 0x26, 0x53, 0xfb, 0xd4, 0x36, 0x2e, 0xa8, 0x51, 0xac, 0x52, 0xdf, 0x6c, 0xee, 0x12,
	0xc9, 0x4e, 0xcc, 0x8d, 0x85, 0x8f, 0x9e, 0x1b, 0xf2, 0x89, 0x5c, 0x08, 0xd5, 0x34, 0xd1, 0xcb,
	0x48, 0xab, 0x45, 0x24, 0x43, 0xe7, 0xe1, 0x0c, 0x3f, 0x6c, 0x5b, 0xe1, 0x18, 0xca, 0x93, 0x24,
	0x3f, 0xac, 0x3a, 0x11, 0x74, 0xef, 0x1b, 0x9f, 0x8d, 0x61, 0xfd, 0xbe, 0x84, 0x42, 0x29, 0xaf,
	0x85, 0x50, 0x44, 0x4a, 0xa1, 0x94, 0xd7, 0xc7, 0x30, 0x54, 0xda, 0x7d, 0x09, 0x6f, 0x84, 0xd0,
	0xee, 0xc7, 0xd0, 0x17, 0x46, 0x65, 0x0c, 0x9b, 0x22, 0x82, 0xce, 0x81, 0xb1, 0x3a, 0x86, 0xb5,
	0x03, 0xf4, 0x3f, 0x38, 0x63, 0xb7, 0x3d, 0xcf, 0x37, 0x3e, 0x9f, 0x38, 0xb7, 0xdb, 0x68, 0x34,
	0x49, 0xd2, 0x6e, 0x78, 0x3e, 0x5a, 0x83, 0xba, 0xeb, 0x1b, 0x37, 0x4f, 0xed, 0x3e, 0x6c, 0xdf,
	0x4a, 0xbd, 0x79, 0x97, 0x09, 0x6e, 0x99, 0x7e, 0xd8, 0x44, 0xf5, 0x26, 0xd1, 0x5d, 0x5f, 0x36,
	0x51, 0x9f, 0xf9, 0x3e, 0xed, 0x31, 0xdf, 0xf8, 0x42, 0xb6, 0x18, 0x89, 0xe3, 0xe5, 0xbf, 0x00,
	0xcc, 0xc6, 0x55, 0x68, 0x01, 0xa6, 0x6c, 0x97, 0x76, 0xda, 0x6b, 0xaa, 0xf7, 0x75, 0x32, 0x23,
	0xa3, 0xb5, 0x18, 0x6f, 0x44, 0x77, 0x07, 0x85, 0x37, 0xd0, 0x45, 0x98, 0x0e, 0xd5, 0x1b, 0xd1,
	0xb5, 0x41, 0xa9, 0xd6, 0x36, 0xd0, 0x57, 0x70, 0xce, 0xf4, 0x06, 0x6d, 0x8f, 0x71, 0x93, 0x39,
	0x82, 0xf6, 0xc2, 0xd9, 0xa2, 0x6f, 0x9d, 0x0b, 0x8e, 0x8b, 0xf9, 0xed, 0xc6, 0xbd, 0x46, 0x9c,
	0x20, 0x79, 0xd3, 0x1b, 0x4c, 0x42, 0x74, 0x0d, 0x9e, 0xeb, 0xb3, 0xbe, 0xcb, 0x8f, 0xa6, 0x8b,
	0x17, 0xd4, 0xc3, 0x0b, 0x61, 0x62, 0x4a, 0x5c, 0x82, 0x39, 0xc1, 0xfa, 0x1e, 0xe3, 0x54, 0x0c,
	0x38, 0x53, 0xe7, 0xab, 0x93, 0x69, 0xb4, 0xf5, 0x2f, 0x78, 0x3e, 0xc4, 0xe0, 0xc5, 0x10, 0x83,
	0x97, 0x43, 0xac, 0xbd, 0x1a, 0x62, 0xed, 0xf5, 0x10, 0x6b, 0x6f, 0x86, 0x58, 0x7b, 0x3b, 0xc4,
	0xe0, 0x61, 0x80, 0xc1, 0xa3, 0x00, 0x6b, 0x8f, 0x03, 0x0c, 0x9e, 0x04, 0x58, 0x7b, 0x1a, 0x60,
	0xed, 0x59, 0x80, 0xb5, 0xe7, 0x01, 0x06, 0x2f, 0x02, 0x0c, 0x5e, 0x06, 0x58, 0x7b, 0x15, 0x60,
	0xf0, 0x3a, 0xc0, 0xda, 0x9b, 0x00, 0x83, 0xb7, 0x01, 0xd6, 0x1e, 0x8e, 0xb0, 0xf6, 0x68, 0x84,
	0xc1, 0x2f, 0x23, 0xac, 0xfd, 0x3a, 0xc2, 0xe0, 0xb7, 0x11, 0xd6, 0x1e, 0x8f, 0xb0, 0xf6, 0x64,
	0x84, 0xc1, 0xd3, 0x11, 0x06, 0xcf, 0x46, 0x18, 0xc0, 0x92, 0xcb, 0x7b, 0x15, 0xb1, 0xcf, 0x84,
	0xba, 0xfe, 0x39, 0xe1, 0xf5, 0xaf, 0x42, 0x3d, 0x6b, 0x7c, 0x5e, 0x5b, 0xb3, 0xd1, 0xf5, 0xa2,
	0x21, 0xaf, 0x71, 0x0d, 0xf0, 0xe3, 0x95, 0x8f, 0xbc, 0x37, 0xfe, 0xa1, 0x5f, 0x3e, 0x9d, 0xae,
	0x6c, 0x36, 0xaa, 0x95, 0xe8, 0x71, 0x7b, 0x29, 0x75, 0x2f, 0xbc, 0xf9, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x9f, 0x3d, 0x54, 0x88, 0x0a, 0x00, 0x00,
}

func (x LocationMetadata_LocationSource) String() string {
	s, ok := LocationMetadata_LocationSource_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LocationMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocationMetadata)
	if !ok {
		that2, ok := that.(LocationMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Latitude != that1.Latitude {
		return false
	}
	if this.Longitude != that1.Longitude {
		return false
	}
	if this.Altitude != that1.Altitude {
		return false
	}
	if this.Accuracy != that1.Accuracy {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	return true
}
func (this *RxMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RxMetadata)
	if !ok {
		that2, ok := that.(RxMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GatewayID != that1.GatewayID {
		return false
	}
	if this.GatewayTrusted != that1.GatewayTrusted {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if !bytes.Equal(this.EncryptedTime, that1.EncryptedTime) {
		return false
	}
	if this.RfChain != that1.RfChain {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return false
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(that1.Antennas[i]) {
			return false
		}
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.RSSI != that1.RSSI {
		return false
	}
	if this.SNR != that1.SNR {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	return true
}
func (this *RxMetadata_Antenna) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RxMetadata_Antenna)
	if !ok {
		that2, ok := that.(RxMetadata_Antenna)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Antenna != that1.Antenna {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if this.RSSI != that1.RSSI {
		return false
	}
	if this.ChannelRSSI != that1.ChannelRSSI {
		return false
	}
	if this.RSSIStandardDeviation != that1.RSSIStandardDeviation {
		return false
	}
	if this.FrequencyOffset != that1.FrequencyOffset {
		return false
	}
	if this.SNR != that1.SNR {
		return false
	}
	if !bytes.Equal(this.EncryptedTime, that1.EncryptedTime) {
		return false
	}
	if this.FineTime != that1.FineTime {
		return false
	}
	return true
}
func (this *TxConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxConfiguration)
	if !ok {
		that2, ok := that.(TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.RfChain != that1.RfChain {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.PolarizationInversion != that1.PolarizationInversion {
		return false
	}
	if this.FrequencyDeviation != that1.FrequencyDeviation {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.GatewayTrusted != that1.GatewayTrusted {
		return false
	}
	if this.BootTime != that1.BootTime {
		return false
	}
	if len(this.IP) != len(that1.IP) {
		return false
	}
	for i := range this.IP {
		if this.IP[i] != that1.IP[i] {
			return false
		}
	}
	if this.Platform != that1.Platform {
		return false
	}
	if this.ContactEmail != that1.ContactEmail {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.FrequencyPlan != that1.FrequencyPlan {
		return false
	}
	if this.Bridge != that1.Bridge {
		return false
	}
	if this.Router != that1.Router {
		return false
	}
	if this.FPGA != that1.FPGA {
		return false
	}
	if this.DSP != that1.DSP {
		return false
	}
	if this.HAL != that1.HAL {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if this.RTT != that1.RTT {
		return false
	}
	if this.RxIn != that1.RxIn {
		return false
	}
	if this.RxOk != that1.RxOk {
		return false
	}
	if this.TxIn != that1.TxIn {
		return false
	}
	if this.TxOk != that1.TxOk {
		return false
	}
	if this.LmOk != that1.LmOk {
		return false
	}
	if this.LmSt != that1.LmSt {
		return false
	}
	if this.LmNw != that1.LmNw {
		return false
	}
	if this.LPPS != that1.LPPS {
		return false
	}
	if !this.OS.Equal(that1.OS) {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if this.Messages[i] != that1.Messages[i] {
			return false
		}
	}
	return true
}
func (this *Status_OSMetrics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status_OSMetrics)
	if !ok {
		that2, ok := that.(Status_OSMetrics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Load_1 != that1.Load_1 {
		return false
	}
	if this.Load_5 != that1.Load_5 {
		return false
	}
	if this.Load_15 != that1.Load_15 {
		return false
	}
	if this.CPUPercentage != that1.CPUPercentage {
		return false
	}
	if this.MemoryPercentage != that1.MemoryPercentage {
		return false
	}
	if this.Temperature != that1.Temperature {
		return false
	}
	return true
}
func (m *LocationMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x30
	}
	if m.Accuracy != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Accuracy))
		i--
		dAtA[i] = 0x28
	}
	if m.Altitude != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Altitude))
		i--
		dAtA[i] = 0x20
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x15
	}
	if m.Time != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RxMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RxMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RxMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if m.SNR != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SNR))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8d
	}
	if m.RSSI != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RSSI))))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x85
	}
	if m.Frequency != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if len(m.Antennas) > 0 {
		for iNdEx := len(m.Antennas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Antennas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if m.Channel != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.RfChain != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.RfChain))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.EncryptedTime) > 0 {
		i -= len(m.EncryptedTime)
		copy(dAtA[i:], m.EncryptedTime)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EncryptedTime)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Time != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x60
	}
	if m.Timestamp != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x58
	}
	if m.GatewayTrusted {
		i--
		if m.GatewayTrusted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.GatewayID) > 0 {
		i -= len(m.GatewayID)
		copy(dAtA[i:], m.GatewayID)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.GatewayID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RxMetadata_Antenna) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RxMetadata_Antenna) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RxMetadata_Antenna) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FineTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.FineTime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.EncryptedTime) > 0 {
		i -= len(m.EncryptedTime)
		copy(dAtA[i:], m.EncryptedTime)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.EncryptedTime)))
		i--
		dAtA[i] = 0x52
	}
	if m.FrequencyOffset != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.FrequencyOffset))
		i--
		dAtA[i] = 0x38
	}
	if m.RSSIStandardDeviation != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RSSIStandardDeviation))))
		i--
		dAtA[i] = 0x35
	}
	if m.ChannelRSSI != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ChannelRSSI))))
		i--
		dAtA[i] = 0x2d
	}
	if m.SNR != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SNR))))
		i--
		dAtA[i] = 0x25
	}
	if m.RSSI != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RSSI))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Channel != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Channel))
		i--
		dAtA[i] = 0x10
	}
	if m.Antenna != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Antenna))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FrequencyDeviation != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.FrequencyDeviation))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.PolarizationInversion {
		i--
		if m.PolarizationInversion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.Power != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.Frequency != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.RfChain != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.RfChain))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.Timestamp != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x58
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0x3
			i--
			dAtA[i] = 0xa2
		}
	}
	if m.OS != nil {
		{
			size, err := m.OS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	if m.LPPS != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.LPPS))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.LmNw != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.LmNw))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.LmSt != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.LmSt))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if m.LmOk != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.LmOk))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.TxOk != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.TxOk))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.TxIn != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.TxIn))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.RxOk != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.RxOk))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.RxIn != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.RxIn))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	if m.RTT != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.RTT))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.HAL) > 0 {
		i -= len(m.HAL)
		copy(dAtA[i:], m.HAL)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.HAL)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.DSP != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.DSP))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.FPGA != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.FPGA))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Router) > 0 {
		i -= len(m.Router)
		copy(dAtA[i:], m.Router)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Router)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Bridge) > 0 {
		i -= len(m.Bridge)
		copy(dAtA[i:], m.Bridge)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Bridge)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.FrequencyPlan) > 0 {
		i -= len(m.FrequencyPlan)
		copy(dAtA[i:], m.FrequencyPlan)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.FrequencyPlan)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.ContactEmail) > 0 {
		i -= len(m.ContactEmail)
		copy(dAtA[i:], m.ContactEmail)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.ContactEmail)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintGateway(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.IP) > 0 {
		for iNdEx := len(m.IP) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IP[iNdEx])
			copy(dAtA[i:], m.IP[iNdEx])
			i = encodeVarintGateway(dAtA, i, uint64(len(m.IP[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.BootTime != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.BootTime))
		i--
		dAtA[i] = 0x20
	}
	if m.GatewayTrusted {
		i--
		if m.GatewayTrusted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Time != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintGateway(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Status_OSMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status_OSMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status_OSMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Temperature != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Temperature))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfd
	}
	if m.MemoryPercentage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MemoryPercentage))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xad
	}
	if m.CPUPercentage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CPUPercentage))))
		i--
		dAtA[i] = 0x5d
	}
	if m.Load_15 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Load_15))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Load_5 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Load_5))))
		i--
		dAtA[i] = 0x15
	}
	if m.Load_1 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Load_1))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintGateway(dAtA []byte, offset int, v uint64) int {
	offset -= sovGateway(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedLocationMetadata(r randyGateway, easy bool) *LocationMetadata {
	this := &LocationMetadata{}
	this.Time = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Time *= -1
	}
	this.Latitude = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Latitude *= -1
	}
	this.Longitude = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Longitude *= -1
	}
	this.Altitude = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Altitude *= -1
	}
	this.Accuracy = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Accuracy *= -1
	}
	this.Source = LocationMetadata_LocationSource([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRxMetadata(r randyGateway, easy bool) *RxMetadata {
	this := &RxMetadata{}
	this.GatewayID = string(randStringGateway(r))
	this.GatewayTrusted = bool(bool(r.Intn(2) == 0))
	this.Timestamp = uint32(r.Uint32())
	this.Time = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Time *= -1
	}
	v1 := r.Intn(100)
	this.EncryptedTime = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.EncryptedTime[i] = byte(r.Intn(256))
	}
	this.RfChain = uint32(r.Uint32())
	this.Channel = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Antennas = make([]*RxMetadata_Antenna, v2)
		for i := 0; i < v2; i++ {
			this.Antennas[i] = NewPopulatedRxMetadata_Antenna(r, easy)
		}
	}
	this.Frequency = uint64(uint64(r.Uint32()))
	this.RSSI = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.RSSI *= -1
	}
	this.SNR = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.SNR *= -1
	}
	if r.Intn(5) != 0 {
		this.Location = NewPopulatedLocationMetadata(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRxMetadata_Antenna(r randyGateway, easy bool) *RxMetadata_Antenna {
	this := &RxMetadata_Antenna{}
	this.Antenna = uint32(r.Uint32())
	this.Channel = uint32(r.Uint32())
	this.RSSI = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.RSSI *= -1
	}
	this.SNR = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.SNR *= -1
	}
	this.ChannelRSSI = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.ChannelRSSI *= -1
	}
	this.RSSIStandardDeviation = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.RSSIStandardDeviation *= -1
	}
	this.FrequencyOffset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.FrequencyOffset *= -1
	}
	v3 := r.Intn(100)
	this.EncryptedTime = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.EncryptedTime[i] = byte(r.Intn(256))
	}
	this.FineTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.FineTime *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTxConfiguration(r randyGateway, easy bool) *TxConfiguration {
	this := &TxConfiguration{}
	this.Timestamp = uint32(r.Uint32())
	this.RfChain = uint32(r.Uint32())
	this.Frequency = uint64(uint64(r.Uint32()))
	this.Power = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Power *= -1
	}
	this.PolarizationInversion = bool(bool(r.Intn(2) == 0))
	this.FrequencyDeviation = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatus(r randyGateway, easy bool) *Status {
	this := &Status{}
	this.Timestamp = uint32(r.Uint32())
	this.Time = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Time *= -1
	}
	this.GatewayTrusted = bool(bool(r.Intn(2) == 0))
	this.BootTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.BootTime *= -1
	}
	v4 := r.Intn(10)
	this.IP = make([]string, v4)
	for i := 0; i < v4; i++ {
		this.IP[i] = string(randStringGateway(r))
	}
	this.Platform = string(randStringGateway(r))
	this.ContactEmail = string(randStringGateway(r))
	this.Description = string(randStringGateway(r))
	this.FrequencyPlan = string(randStringGateway(r))
	this.Bridge = string(randStringGateway(r))
	this.Router = string(randStringGateway(r))
	this.FPGA = uint32(r.Uint32())
	this.DSP = uint32(r.Uint32())
	this.HAL = string(randStringGateway(r))
	if r.Intn(5) != 0 {
		this.Location = NewPopulatedLocationMetadata(r, easy)
	}
	this.RTT = uint32(r.Uint32())
	this.RxIn = uint32(r.Uint32())
	this.RxOk = uint32(r.Uint32())
	this.TxIn = uint32(r.Uint32())
	this.TxOk = uint32(r.Uint32())
	this.LmOk = uint32(r.Uint32())
	this.LmSt = uint32(r.Uint32())
	this.LmNw = uint32(r.Uint32())
	this.LPPS = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.OS = NewPopulatedStatus_OSMetrics(r, easy)
	}
	v5 := r.Intn(10)
	this.Messages = make([]string, v5)
	for i := 0; i < v5; i++ {
		this.Messages[i] = string(randStringGateway(r))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatus_OSMetrics(r randyGateway, easy bool) *Status_OSMetrics {
	this := &Status_OSMetrics{}
	this.Load_1 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Load_1 *= -1
	}
	this.Load_5 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Load_5 *= -1
	}
	this.Load_15 = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Load_15 *= -1
	}
	this.CPUPercentage = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.CPUPercentage *= -1
	}
	this.MemoryPercentage = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.MemoryPercentage *= -1
	}
	this.Temperature = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Temperature *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGateway interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGateway(r randyGateway) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGateway(r randyGateway) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneGateway(r)
	}
	return string(tmps)
}
func randUnrecognizedGateway(r randyGateway, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGateway(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGateway(dAtA []byte, r randyGateway, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGateway(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *LocationMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGateway(uint64(m.Time))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	if m.Altitude != 0 {
		n += 1 + sovGateway(uint64(m.Altitude))
	}
	if m.Accuracy != 0 {
		n += 1 + sovGateway(uint64(m.Accuracy))
	}
	if m.Source != 0 {
		n += 1 + sovGateway(uint64(m.Source))
	}
	return n
}

func (m *RxMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GatewayID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.GatewayTrusted {
		n += 2
	}
	if m.Timestamp != 0 {
		n += 1 + sovGateway(uint64(m.Timestamp))
	}
	if m.Time != 0 {
		n += 1 + sovGateway(uint64(m.Time))
	}
	l = len(m.EncryptedTime)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.RfChain != 0 {
		n += 2 + sovGateway(uint64(m.RfChain))
	}
	if m.Channel != 0 {
		n += 2 + sovGateway(uint64(m.Channel))
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 2 + l + sovGateway(uint64(l))
		}
	}
	if m.Frequency != 0 {
		n += 2 + sovGateway(uint64(m.Frequency))
	}
	if m.RSSI != 0 {
		n += 6
	}
	if m.SNR != 0 {
		n += 6
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *RxMetadata_Antenna) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Antenna != 0 {
		n += 1 + sovGateway(uint64(m.Antenna))
	}
	if m.Channel != 0 {
		n += 1 + sovGateway(uint64(m.Channel))
	}
	if m.RSSI != 0 {
		n += 5
	}
	if m.SNR != 0 {
		n += 5
	}
	if m.ChannelRSSI != 0 {
		n += 5
	}
	if m.RSSIStandardDeviation != 0 {
		n += 5
	}
	if m.FrequencyOffset != 0 {
		n += 1 + sovGateway(uint64(m.FrequencyOffset))
	}
	l = len(m.EncryptedTime)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.FineTime != 0 {
		n += 1 + sovGateway(uint64(m.FineTime))
	}
	return n
}

func (m *TxConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGateway(uint64(m.Timestamp))
	}
	if m.RfChain != 0 {
		n += 2 + sovGateway(uint64(m.RfChain))
	}
	if m.Frequency != 0 {
		n += 2 + sovGateway(uint64(m.Frequency))
	}
	if m.Power != 0 {
		n += 2 + sovGateway(uint64(m.Power))
	}
	if m.PolarizationInversion {
		n += 3
	}
	if m.FrequencyDeviation != 0 {
		n += 2 + sovGateway(uint64(m.FrequencyDeviation))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovGateway(uint64(m.Timestamp))
	}
	if m.Time != 0 {
		n += 1 + sovGateway(uint64(m.Time))
	}
	if m.GatewayTrusted {
		n += 2
	}
	if m.BootTime != 0 {
		n += 1 + sovGateway(uint64(m.BootTime))
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ContactEmail)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FrequencyPlan)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Bridge)
	if l > 0 {
		n += 2 + l + sovGateway(uint64(l))
	}
	l = len(m.Router)
	if l > 0 {
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.FPGA != 0 {
		n += 2 + sovGateway(uint64(m.FPGA))
	}
	if m.DSP != 0 {
		n += 2 + sovGateway(uint64(m.DSP))
	}
	l = len(m.HAL)
	if l > 0 {
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.RTT != 0 {
		n += 2 + sovGateway(uint64(m.RTT))
	}
	if m.RxIn != 0 {
		n += 2 + sovGateway(uint64(m.RxIn))
	}
	if m.RxOk != 0 {
		n += 2 + sovGateway(uint64(m.RxOk))
	}
	if m.TxIn != 0 {
		n += 2 + sovGateway(uint64(m.TxIn))
	}
	if m.TxOk != 0 {
		n += 2 + sovGateway(uint64(m.TxOk))
	}
	if m.LmOk != 0 {
		n += 2 + sovGateway(uint64(m.LmOk))
	}
	if m.LmSt != 0 {
		n += 2 + sovGateway(uint64(m.LmSt))
	}
	if m.LmNw != 0 {
		n += 2 + sovGateway(uint64(m.LmNw))
	}
	if m.LPPS != 0 {
		n += 2 + sovGateway(uint64(m.LPPS))
	}
	if m.OS != nil {
		l = m.OS.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, s := range m.Messages {
			l = len(s)
			n += 2 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *Status_OSMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Load_1 != 0 {
		n += 5
	}
	if m.Load_5 != 0 {
		n += 5
	}
	if m.Load_15 != 0 {
		n += 5
	}
	if m.CPUPercentage != 0 {
		n += 5
	}
	if m.MemoryPercentage != 0 {
		n += 6
	}
	if m.Temperature != 0 {
		n += 6
	}
	return n
}

func sovGateway(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LocationMetadata) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocationMetadata{`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Latitude:` + fmt.Sprintf("%v", this.Latitude) + `,`,
		`Longitude:` + fmt.Sprintf("%v", this.Longitude) + `,`,
		`Altitude:` + fmt.Sprintf("%v", this.Altitude) + `,`,
		`Accuracy:` + fmt.Sprintf("%v", this.Accuracy) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RxMetadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAntennas := "[]*RxMetadata_Antenna{"
	for _, f := range this.Antennas {
		repeatedStringForAntennas += strings.Replace(fmt.Sprintf("%v", f), "RxMetadata_Antenna", "RxMetadata_Antenna", 1) + ","
	}
	repeatedStringForAntennas += "}"
	s := strings.Join([]string{`&RxMetadata{`,
		`GatewayID:` + fmt.Sprintf("%v", this.GatewayID) + `,`,
		`GatewayTrusted:` + fmt.Sprintf("%v", this.GatewayTrusted) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`EncryptedTime:` + fmt.Sprintf("%v", this.EncryptedTime) + `,`,
		`RfChain:` + fmt.Sprintf("%v", this.RfChain) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`Antennas:` + repeatedStringForAntennas + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`RSSI:` + fmt.Sprintf("%v", this.RSSI) + `,`,
		`SNR:` + fmt.Sprintf("%v", this.SNR) + `,`,
		`Location:` + strings.Replace(this.Location.String(), "LocationMetadata", "LocationMetadata", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RxMetadata_Antenna) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RxMetadata_Antenna{`,
		`Antenna:` + fmt.Sprintf("%v", this.Antenna) + `,`,
		`Channel:` + fmt.Sprintf("%v", this.Channel) + `,`,
		`RSSI:` + fmt.Sprintf("%v", this.RSSI) + `,`,
		`SNR:` + fmt.Sprintf("%v", this.SNR) + `,`,
		`ChannelRSSI:` + fmt.Sprintf("%v", this.ChannelRSSI) + `,`,
		`RSSIStandardDeviation:` + fmt.Sprintf("%v", this.RSSIStandardDeviation) + `,`,
		`FrequencyOffset:` + fmt.Sprintf("%v", this.FrequencyOffset) + `,`,
		`EncryptedTime:` + fmt.Sprintf("%v", this.EncryptedTime) + `,`,
		`FineTime:` + fmt.Sprintf("%v", this.FineTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxConfiguration{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`RfChain:` + fmt.Sprintf("%v", this.RfChain) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`Power:` + fmt.Sprintf("%v", this.Power) + `,`,
		`PolarizationInversion:` + fmt.Sprintf("%v", this.PolarizationInversion) + `,`,
		`FrequencyDeviation:` + fmt.Sprintf("%v", this.FrequencyDeviation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`GatewayTrusted:` + fmt.Sprintf("%v", this.GatewayTrusted) + `,`,
		`BootTime:` + fmt.Sprintf("%v", this.BootTime) + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`ContactEmail:` + fmt.Sprintf("%v", this.ContactEmail) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`FrequencyPlan:` + fmt.Sprintf("%v", this.FrequencyPlan) + `,`,
		`Bridge:` + fmt.Sprintf("%v", this.Bridge) + `,`,
		`Router:` + fmt.Sprintf("%v", this.Router) + `,`,
		`FPGA:` + fmt.Sprintf("%v", this.FPGA) + `,`,
		`DSP:` + fmt.Sprintf("%v", this.DSP) + `,`,
		`HAL:` + fmt.Sprintf("%v", this.HAL) + `,`,
		`Location:` + strings.Replace(this.Location.String(), "LocationMetadata", "LocationMetadata", 1) + `,`,
		`RTT:` + fmt.Sprintf("%v", this.RTT) + `,`,
		`RxIn:` + fmt.Sprintf("%v", this.RxIn) + `,`,
		`RxOk:` + fmt.Sprintf("%v", this.RxOk) + `,`,
		`TxIn:` + fmt.Sprintf("%v", this.TxIn) + `,`,
		`TxOk:` + fmt.Sprintf("%v", this.TxOk) + `,`,
		`LmOk:` + fmt.Sprintf("%v", this.LmOk) + `,`,
		`LmSt:` + fmt.Sprintf("%v", this.LmSt) + `,`,
		`LmNw:` + fmt.Sprintf("%v", this.LmNw) + `,`,
		`LPPS:` + fmt.Sprintf("%v", this.LPPS) + `,`,
		`OS:` + strings.Replace(fmt.Sprintf("%v", this.OS), "Status_OSMetrics", "Status_OSMetrics", 1) + `,`,
		`Messages:` + fmt.Sprintf("%v", this.Messages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Status_OSMetrics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status_OSMetrics{`,
		`Load_1:` + fmt.Sprintf("%v", this.Load_1) + `,`,
		`Load_5:` + fmt.Sprintf("%v", this.Load_5) + `,`,
		`Load_15:` + fmt.Sprintf("%v", this.Load_15) + `,`,
		`CPUPercentage:` + fmt.Sprintf("%v", this.CPUPercentage) + `,`,
		`MemoryPercentage:` + fmt.Sprintf("%v", this.MemoryPercentage) + `,`,
		`Temperature:` + fmt.Sprintf("%v", this.Temperature) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGateway(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LocationMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Altitude", wireType)
			}
			m.Altitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Altitude |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accuracy", wireType)
			}
			m.Accuracy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accuracy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= LocationMetadata_LocationSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RxMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RxMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RxMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayTrusted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GatewayTrusted = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedTime = append(m.EncryptedTime[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedTime == nil {
				m.EncryptedTime = []byte{}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RfChain", wireType)
			}
			m.RfChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RfChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antennas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Antennas = append(m.Antennas, &RxMetadata_Antenna{})
			if err := m.Antennas[len(m.Antennas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSI", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RSSI = float32(math.Float32frombits(v))
		case 33:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNR", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SNR = float32(math.Float32frombits(v))
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &LocationMetadata{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RxMetadata_Antenna) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Antenna: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Antenna: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Antenna", wireType)
			}
			m.Antenna = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Antenna |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSI", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RSSI = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SNR", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SNR = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelRSSI", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ChannelRSSI = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RSSIStandardDeviation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RSSIStandardDeviation = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyOffset", wireType)
			}
			m.FrequencyOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedTime = append(m.EncryptedTime[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedTime == nil {
				m.EncryptedTime = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FineTime", wireType)
			}
			m.FineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FineTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RfChain", wireType)
			}
			m.RfChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RfChain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolarizationInversion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PolarizationInversion = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyDeviation", wireType)
			}
			m.FrequencyDeviation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrequencyDeviation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayTrusted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GatewayTrusted = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BootTime", wireType)
			}
			m.BootTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BootTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrequencyPlan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrequencyPlan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bridge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Router", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Router = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPGA", wireType)
			}
			m.FPGA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FPGA |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DSP", wireType)
			}
			m.DSP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DSP |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HAL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HAL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &LocationMetadata{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTT", wireType)
			}
			m.RTT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RTT |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxIn", wireType)
			}
			m.RxIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxIn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxOk", wireType)
			}
			m.RxOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RxOk |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIn", wireType)
			}
			m.TxIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOk", wireType)
			}
			m.TxOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxOk |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LmOk", wireType)
			}
			m.LmOk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LmOk |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LmSt", wireType)
			}
			m.LmSt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LmSt |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LmNw", wireType)
			}
			m.LmNw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LmNw |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LPPS", wireType)
			}
			m.LPPS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LPPS |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OS == nil {
				m.OS = &Status_OSMetrics{}
			}
			if err := m.OS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status_OSMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OSMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OSMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load_1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Load_1 = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load_5", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Load_5 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load_15", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Load_15 = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPUPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CPUPercentage = float32(math.Float32frombits(v))
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryPercentage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MemoryPercentage = float32(math.Float32frombits(v))
		case 31:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Temperature = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGateway
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGateway
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGateway
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGateway        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGateway          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGateway = fmt.Errorf("proto: unexpected end of group")
)
