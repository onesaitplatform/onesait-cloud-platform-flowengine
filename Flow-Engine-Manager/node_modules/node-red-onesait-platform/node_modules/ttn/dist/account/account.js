"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccountClient = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _sourceMapSupport2 = require("source-map-support");

var _nodeFetch = require("node-fetch");

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _utils = require("../utils");

var _isToken = require("../utils/is-token");

var _isToken2 = _interopRequireDefault(_isToken);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)(); // Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

// Necessary to make gRPC work
process.env.GRPC_SSL_CIPHER_SUITES = _utils.MODERN_CIPHER_SUITES;

/**
 * `Account` is a client for The Things Network account server API.
 * It can be used to manage applications and their EUIs, as well as gateways.
 * Either a Bearer Token or an Application Access Key can be used for
 * authentication. The latter method allows to use the `getApplication()`
 * function only.
 *
 * Example:
 * ```
 * const account = new Account("accesKeyOrToken", "https://customserveradress.org")
 * ```
 */

var AccountClient = exports.AccountClient = function () {
  /** @private */
  function AccountClient(accessKeyOrToken) {
    var serverAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "https://account.thethingsnetwork.org";
    (0, _classCallCheck3.default)(this, AccountClient);

    this.authHeader = (0, _isToken2.default)(accessKeyOrToken) ? "Bearer " + accessKeyOrToken : "Key " + accessKeyOrToken;

    this.serverAddress = serverAddress;
  }

  /** @private */


  /** @private */


  (0, _createClass3.default)(AccountClient, [{
    key: "makeRequest",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url) {
        var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";
        var body = arguments[2];
        var res;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _nodeFetch2.default)(this.serverAddress + "/" + url, {
                  method: method,
                  body: (0, _stringify2.default)(body),
                  headers: {
                    authorization: this.authHeader,
                    "content-type": "application/json"
                  }
                });

              case 2:
                res = _context.sent;

                if (!(res.status >= 400)) {
                  _context.next = 5;
                  break;
                }

                throw new Error(res.status + " " + res.statusText);

              case 5:
                return _context.abrupt("return", res.json());

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function makeRequest(_x2) {
        return _ref.apply(this, arguments);
      }

      return makeRequest;
    }()

    /**
     * Gets metadata about all applications that are accessible with
     * the given accessToken
     */

  }, {
    key: "getAllApplications",
    value: function getAllApplications() {
      return this.makeRequest("applications");
    }

    /**
     * Gets the information that is stored about a given application.
     * This includes the EUIs, name access keys, collaborators.
     * The properties that can be retrieved depend on the rights of
     * the used authorization mechanism.
     */

  }, {
    key: "getApplication",
    value: function getApplication(appID) {
      return this.makeRequest("applications/" + appID);
    }

    /**
     * Creates a new application on the account server.
     */

  }, {
    key: "createApplication",
    value: function createApplication(app) {
      return this.makeRequest("applications", "POST", app);
    }

    /**
     * Removes an application from the account server.
     */

  }, {
    key: "deleteApplication",
    value: function deleteApplication(appID) {
      return this.makeRequest("applications/" + appID, "DELETE");
    }

    /**
     * Adds a collaborator with a set of access rights to the given application.
     */

  }, {
    key: "addCollaborator",
    value: function addCollaborator(appID, collaborator, rights) {
      return this.makeRequest("applications/" + appID + "/collaborators/" + collaborator, "PUT", rights);
    }

    /**
     * Removes a collaborator by her username from an application
     */

  }, {
    key: "deleteCollaborator",
    value: function deleteCollaborator(appID, collaborator) {
      return this.makeRequest("applications/" + appID + "/collaborators/" + collaborator, "DELETE");
    }

    /**
     * Adds an EUI to the given application. Must be hexadecimal with a length of 16.
     */

  }, {
    key: "addEUI",
    value: function addEUI(appID, eui) {
      return this.makeRequest("applications/" + appID + "/euis/" + eui, "PUT");
    }

    /**
     * Removes an EUI from the given application.
     */

  }, {
    key: "deleteEUI",
    value: function deleteEUI(appID, eui) {
      return this.makeRequest("applications/" + appID + "/euis/" + eui, "DELETE");
    }
  }]);
  return AccountClient;
}();

/**
 * AppAccessRights
 */


/**
 * The minimal payload for to the POST /applications route
 * of the account server
 */


/**
 * AccountApplication contains the metadata of an application
 * returned by the account server. Presence of optional fields
 * depends on the [access rights](#appaccessrights) of the used accessKey / -token.
 */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,