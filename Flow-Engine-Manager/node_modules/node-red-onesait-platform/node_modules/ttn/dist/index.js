"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.account = exports.data = exports.application = exports.services = exports.Discovery = exports.ApplicationClient = exports.wildcard = exports.DataClient = exports.key = exports.HandlerClient = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _sourceMapSupport2 = require("source-map-support");

var _handler = require("./handler");

Object.defineProperty(exports, "HandlerClient", {
  enumerable: true,
  get: function get() {
    return _handler.HandlerClient;
  }
});

var _key = require("./utils/key");

Object.defineProperty(exports, "key", {
  enumerable: true,
  get: function get() {
    return _key.key;
  }
});

var _data = require("./data");

Object.defineProperty(exports, "DataClient", {
  enumerable: true,
  get: function get() {
    return _data.DataClient;
  }
});
Object.defineProperty(exports, "wildcard", {
  enumerable: true,
  get: function get() {
    return _data.wildcard;
  }
});

var _applications = require("./applications");

Object.defineProperty(exports, "ApplicationClient", {
  enumerable: true,
  get: function get() {
    return _applications.ApplicationClient;
  }
});

var _discovery = require("./discovery");

Object.defineProperty(exports, "Discovery", {
  enumerable: true,
  get: function get() {
    return _discovery.Discovery;
  }
});
Object.defineProperty(exports, "services", {
  enumerable: true,
  get: function get() {
    return _discovery.services;
  }
});

var _account = require("./account");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)(); // Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

/**
 * `open` creates and opens a HandlerClient for the application with the specified ID.
 *
 * @param appID - The ID of the application you want to manage.
 * @param tokenOrKey - The Access Token or Access Key used to authenticate.
 * @param opts - Optional options to pass to the Discovery client.
 */
var open = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(appID, accessKerOrToken, opts) {
    var handler;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            handler = new _handler.HandlerClient(appID, accessKerOrToken, opts);
            _context.next = 3;
            return handler.open();

          case 3:
            return _context.abrupt("return", handler);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function open(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * `application` creates and opens an ApplicationClient for the application with the specified ID.
 *
 * @param appID - The ID of the application you want to manage
 * @param accessKeyOrToken - The Access Token or Access Key used to authenticate
 */
var application = exports.application = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(appID, accessKeyOrToken, opts) {
    var handler;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return open(appID, accessKeyOrToken, opts);

          case 2:
            handler = _context2.sent;
            return _context2.abrupt("return", handler.application());

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function application(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * `data` creates and opens an DataClient for the application with the specified ID.
 *
 * @param appID - The ID of the application you want to manage
 * @param accessKeyOrToken  - The Access Token or Access Key used to authenticate
 */
var data = exports.data = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(appID, accessKeyOrToken, opts) {
    var handler;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return open(appID, accessKeyOrToken, opts);

          case 2:
            handler = _context3.sent;
            return _context3.abrupt("return", handler.data());

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function data(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();

/**
 * `account` creates an AccountClient for the user associated to the specified key or token.
 *
 * @param accessKeyOrToken  - The Access Token or Access Key used to authenticate
 * @param serverAddress  - The URL to the account server to use. Defaults to "https://account.thethingsnetwork.org"
 */
var account = exports.account = function account(accessKeyOrToken, serverAddress) {
  return new _account.AccountClient(accessKeyOrToken, serverAddress);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJIYW5kbGVyQ2xpZW50Iiwia2V5IiwiRGF0YUNsaWVudCIsIndpbGRjYXJkIiwiQXBwbGljYXRpb25DbGllbnQiLCJEaXNjb3ZlcnkiLCJzZXJ2aWNlcyIsIm9wZW4iLCJhcHBJRCIsImFjY2Vzc0tlck9yVG9rZW4iLCJvcHRzIiwiaGFuZGxlciIsImFwcGxpY2F0aW9uIiwiYWNjZXNzS2V5T3JUb2tlbiIsImRhdGEiLCJhY2NvdW50Iiwic2VydmVyQWRkcmVzcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQTs7Ozs7b0JBTVNBLGE7Ozs7Ozs7OztnQkFDQUMsRzs7OztBQUpUOzs7OztpQkFLU0MsVTs7Ozs7O2lCQUFZQyxROzs7O0FBTnJCOzs7Ozt5QkFPU0MsaUI7Ozs7Ozs7OztzQkFDQUMsUzs7Ozs7O3NCQUFXQyxROzs7O0FBVHBCOzs7O21DQU5BO0FBQ0E7O0FBZ0JBOzs7Ozs7O0FBT0EsSUFBTUM7QUFBQSx3RUFBTyxpQkFBZ0JDLEtBQWhCLEVBQWdDQyxnQkFBaEMsRUFBMkRDLElBQTNEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNMQyxtQkFESyxHQUNLLDJCQUFrQkgsS0FBbEIsRUFBeUJDLGdCQUF6QixFQUEyQ0MsSUFBM0MsQ0FETDtBQUFBO0FBQUEsbUJBRUxDLFFBQVFKLElBQVIsRUFGSzs7QUFBQTtBQUFBLDZDQUdKSSxPQUhJOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQVA7O0FBQUE7QUFBQTtBQUFBO0FBQUEsR0FBTjs7QUFNQTs7Ozs7O0FBTU8sSUFBTUM7QUFBQSx5RUFBYyxrQkFBZ0JKLEtBQWhCLEVBQWdDSyxnQkFBaEMsRUFBMkRILElBQTNEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ0hILEtBQUtDLEtBQUwsRUFBWUssZ0JBQVosRUFBOEJILElBQTlCLENBREc7O0FBQUE7QUFDbkJDLG1CQURtQjtBQUFBLDhDQUVsQkEsUUFBUUMsV0FBUixFQUZrQjs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFkOztBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQU47O0FBS1A7Ozs7OztBQU1PLElBQU1FO0FBQUEseUVBQU8sa0JBQWdCTixLQUFoQixFQUFnQ0ssZ0JBQWhDLEVBQTJESCxJQUEzRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1CQUNJSCxLQUFLQyxLQUFMLEVBQVlLLGdCQUFaLEVBQThCSCxJQUE5QixDQURKOztBQUFBO0FBQ1pDLG1CQURZO0FBQUEsOENBRVhBLFFBQVFHLElBQVIsRUFGVzs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFQOztBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQU47O0FBS1A7Ozs7OztBQU1PLElBQU1DLDRCQUFVLFNBQVZBLE9BQVUsQ0FBVUYsZ0JBQVYsRUFBcUNHLGFBQXJDLEVBQThFO0FBQ25HLFNBQU8sMkJBQWtCSCxnQkFBbEIsRUFBb0NHLGFBQXBDLENBQVA7QUFDRCxDQUZNIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IMKpIDIwMTcgVGhlIFRoaW5ncyBOZXR3b3JrXG4vLyBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTUlUIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZS5cblxuLy8gQGZsb3dcblxuaW1wb3J0IHsgSGFuZGxlckNsaWVudCB9IGZyb20gXCIuL2hhbmRsZXJcIlxuaW1wb3J0IHsgQWNjb3VudENsaWVudCB9IGZyb20gXCIuL2FjY291bnRcIlxuaW1wb3J0IHsgQXBwbGljYXRpb25DbGllbnQgfSBmcm9tIFwiLi9hcHBsaWNhdGlvbnNcIlxuaW1wb3J0IHsgRGF0YUNsaWVudCB9IGZyb20gXCIuL2RhdGFcIlxuaW1wb3J0IHR5cGUgeyBEaXNjb3ZlcnlPcHRpb25zIH0gZnJvbSBcIi4vZGlzY292ZXJ5XCJcblxuZXhwb3J0IHsgSGFuZGxlckNsaWVudCB9IGZyb20gXCIuL2hhbmRsZXJcIlxuZXhwb3J0IHsga2V5IH0gZnJvbSBcIi4vdXRpbHMva2V5XCJcbmV4cG9ydCB7IERhdGFDbGllbnQsIHdpbGRjYXJkIH0gZnJvbSBcIi4vZGF0YVwiXG5leHBvcnQgeyBBcHBsaWNhdGlvbkNsaWVudCB9IGZyb20gXCIuL2FwcGxpY2F0aW9uc1wiXG5leHBvcnQgeyBEaXNjb3ZlcnksIHNlcnZpY2VzIH0gZnJvbSBcIi4vZGlzY292ZXJ5XCJcblxuLyoqXG4gKiBgb3BlbmAgY3JlYXRlcyBhbmQgb3BlbnMgYSBIYW5kbGVyQ2xpZW50IGZvciB0aGUgYXBwbGljYXRpb24gd2l0aCB0aGUgc3BlY2lmaWVkIElELlxuICpcbiAqIEBwYXJhbSBhcHBJRCAtIFRoZSBJRCBvZiB0aGUgYXBwbGljYXRpb24geW91IHdhbnQgdG8gbWFuYWdlLlxuICogQHBhcmFtIHRva2VuT3JLZXkgLSBUaGUgQWNjZXNzIFRva2VuIG9yIEFjY2VzcyBLZXkgdXNlZCB0byBhdXRoZW50aWNhdGUuXG4gKiBAcGFyYW0gb3B0cyAtIE9wdGlvbmFsIG9wdGlvbnMgdG8gcGFzcyB0byB0aGUgRGlzY292ZXJ5IGNsaWVudC5cbiAqL1xuY29uc3Qgb3BlbiA9IGFzeW5jIGZ1bmN0aW9uIChhcHBJRCA6IHN0cmluZywgYWNjZXNzS2VyT3JUb2tlbiA6IHN0cmluZywgb3B0cyA6ID9EaXNjb3ZlcnlPcHRpb25zKSA6IFByb21pc2U8SGFuZGxlckNsaWVudD4ge1xuICBjb25zdCBoYW5kbGVyID0gbmV3IEhhbmRsZXJDbGllbnQoYXBwSUQsIGFjY2Vzc0tlck9yVG9rZW4sIG9wdHMpXG4gIGF3YWl0IGhhbmRsZXIub3BlbigpXG4gIHJldHVybiBoYW5kbGVyXG59XG5cbi8qKlxuICogYGFwcGxpY2F0aW9uYCBjcmVhdGVzIGFuZCBvcGVucyBhbiBBcHBsaWNhdGlvbkNsaWVudCBmb3IgdGhlIGFwcGxpY2F0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBJRC5cbiAqXG4gKiBAcGFyYW0gYXBwSUQgLSBUaGUgSUQgb2YgdGhlIGFwcGxpY2F0aW9uIHlvdSB3YW50IHRvIG1hbmFnZVxuICogQHBhcmFtIGFjY2Vzc0tleU9yVG9rZW4gLSBUaGUgQWNjZXNzIFRva2VuIG9yIEFjY2VzcyBLZXkgdXNlZCB0byBhdXRoZW50aWNhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGxpY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gKGFwcElEIDogc3RyaW5nLCBhY2Nlc3NLZXlPclRva2VuIDogc3RyaW5nLCBvcHRzIDogP0Rpc2NvdmVyeU9wdGlvbnMpIDogUHJvbWlzZTxBcHBsaWNhdGlvbkNsaWVudD4ge1xuICBjb25zdCBoYW5kbGVyID0gYXdhaXQgb3BlbihhcHBJRCwgYWNjZXNzS2V5T3JUb2tlbiwgb3B0cylcbiAgcmV0dXJuIGhhbmRsZXIuYXBwbGljYXRpb24oKVxufVxuXG4vKipcbiAqIGBkYXRhYCBjcmVhdGVzIGFuZCBvcGVucyBhbiBEYXRhQ2xpZW50IGZvciB0aGUgYXBwbGljYXRpb24gd2l0aCB0aGUgc3BlY2lmaWVkIElELlxuICpcbiAqIEBwYXJhbSBhcHBJRCAtIFRoZSBJRCBvZiB0aGUgYXBwbGljYXRpb24geW91IHdhbnQgdG8gbWFuYWdlXG4gKiBAcGFyYW0gYWNjZXNzS2V5T3JUb2tlbiAgLSBUaGUgQWNjZXNzIFRva2VuIG9yIEFjY2VzcyBLZXkgdXNlZCB0byBhdXRoZW50aWNhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGEgPSBhc3luYyBmdW5jdGlvbiAoYXBwSUQgOiBzdHJpbmcsIGFjY2Vzc0tleU9yVG9rZW4gOiBzdHJpbmcsIG9wdHMgOiA/RGlzY292ZXJ5T3B0aW9ucykgOiBQcm9taXNlPERhdGFDbGllbnQ+IHtcbiAgY29uc3QgaGFuZGxlciA9IGF3YWl0IG9wZW4oYXBwSUQsIGFjY2Vzc0tleU9yVG9rZW4sIG9wdHMpXG4gIHJldHVybiBoYW5kbGVyLmRhdGEoKVxufVxuXG4vKipcbiAqIGBhY2NvdW50YCBjcmVhdGVzIGFuIEFjY291bnRDbGllbnQgZm9yIHRoZSB1c2VyIGFzc29jaWF0ZWQgdG8gdGhlIHNwZWNpZmllZCBrZXkgb3IgdG9rZW4uXG4gKlxuICogQHBhcmFtIGFjY2Vzc0tleU9yVG9rZW4gIC0gVGhlIEFjY2VzcyBUb2tlbiBvciBBY2Nlc3MgS2V5IHVzZWQgdG8gYXV0aGVudGljYXRlXG4gKiBAcGFyYW0gc2VydmVyQWRkcmVzcyAgLSBUaGUgVVJMIHRvIHRoZSBhY2NvdW50IHNlcnZlciB0byB1c2UuIERlZmF1bHRzIHRvIFwiaHR0cHM6Ly9hY2NvdW50LnRoZXRoaW5nc25ldHdvcmsub3JnXCJcbiAqL1xuZXhwb3J0IGNvbnN0IGFjY291bnQgPSBmdW5jdGlvbiAoYWNjZXNzS2V5T3JUb2tlbiA6IHN0cmluZywgc2VydmVyQWRkcmVzcz8gOiBzdHJpbmcpIDogQWNjb3VudENsaWVudCB7XG4gIHJldHVybiBuZXcgQWNjb3VudENsaWVudChhY2Nlc3NLZXlPclRva2VuLCBzZXJ2ZXJBZGRyZXNzKVxufVxuIl19